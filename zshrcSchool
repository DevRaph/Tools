# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
alias subl='/Applications/Sublime\ Text\ 3.app/Contents/SharedSupport/bin/subl'
alias mysql='~/mamp/mysql/bin/mysql'

export MANPAGER=most

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="robbyrussell"
# ZSH_THEME="sorin"
ZSH_THEME="jreese"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration
export HOMEBREW_CASK_OPTS="--appdir=~/Applications --caskroom=~/Caskroom"

export PATH="/nfs/zfs-student-3/\
users/2014/rpinet/.brew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/texbin:/nfs/zfs-student-3/users/2014/rpinet/.brew/bin"
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


alias rsc="source ~/.zshrc"

function save()
{
	if [ ! -d ~/save_path ]; then
		mkdir ~/save_path
	fi
	pwd > ~/save_path/$1.save_path;
};

function go()
{
	if [ -f ~/save_path/$1.save_path ]; then
		cd "`cat ~/save_path/$1.save_path`";
	else
		echo "The save $1 does not exists.";
	fi
};

function saved()
{
	if [ -d ~/save_path ]; then
		ls -1 ~/save_path | grep ".save_path" | sed -E "s/.save_path$//"
	fi
};

alias hnorm='~/bin/norme/hnorm'



































function header()
{
    if [ $# -eq 0 ]; then
        echo "Usage: correctme <login_destinataire>";
        return ;
    fi

    START_LINES="/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */"

    if [[ -f "$1" ]]; then
        HEAD="`head -3 "$1"`"
        if [[ "$HEAD" == "$START_LINES" ]]; then
            CONTENT=`tail -n +13 "$1"`
        else
            CONTENT=`cat "$1"`
        fi
    else
        CONTENT=
    fi

    NOW=`date +"%Y/%m/%d %H:%M:%S"`

    if [[ -n "$2" ]]; then
        WHO="$2"
    else
        WHO=`whoami`
    fi

    printf "${START_LINES}\n" > $1
    printf "/*   %-50s :+:      :+:    :+:   */\n" "$1" >> $1
    printf "/*                                                    +:+ +:+         +:+     */\n" >> $1
    printf "/*   By: %-42s +#+  +:+       +#+        */\n" "${WHO} <${WHO}@student.42.fr>" >> $1
    printf "/*                                                +#+#+#+#+#+   +#+           */\n" >> $1
    printf "/*   Created: %s by %-17s #+#    #+#             */\n" "${NOW}" "${WHO}" >> $1
    printf "/*   Updated: %s by %-16s ###   ########.fr       */\n" "${NOW}" "${WHO}" >> $1
    printf "/*                                                                            */\n" >> $1
    printf "/* ************************************************************************** */\n" >> $1
    printf "${CONTENT}\n" >> $1
};

function class()
{
    classcpp $@;
}

function classcpp()
{
    if [ $# -eq 0 ]; then
        echo "Usage: correctme <login_destinataire>";
        return ;
    fi

    if [ -f $1.hpp ]; then
        if [ -f $1.cpp ]; then
            printf "File \033[31m$1.cpp\033[0m already exist.\n"
        fi
        printf "File \033[31m$1.hpp\033[0m already exist.\n"
        return ;
    fi

    if [ -f $1.cpp ]; then
        printf "File \033[31m$1.cpp\033[0m already exist.\n"
        return ;
    fi

    header $1.hpp;
    header $1.cpp;

    name=$(echo "$1" | tr '[:lower:]' '[:upper:]')

    cat <<EOF >> $1.hpp
#ifndef ${name}_HPP
# define ${name}_HPP

# include <iostream>
# include <string>

class $1
{
    private:
EOF

    for i in "$@"
    do
        if [[ "$i" = $1 ]]; then
        else
            printf "\t\tint\t\t_$i;\n" >> $1.hpp
        fi
    done

    cat <<EOF >> $1.hpp

    public:
        $1(void);
        $1($1 const &);
        $1 &operator=($1 const &);
        ~$1(void);

EOF
    if [ $# -eq 1 ]; then
    else
        for i in "$@"
        do
            if [[ "$i" = $1 ]]; then
            else
                access=$(echo $(tr a-z A-Z <<< ${i:0:1})${i:1})
                printf "\t\tvoid\tset$access(int);\n" >> $1.hpp
            fi
        done
        printf "\n" >> $1.hpp
        for i in "$@"
        do
            if [[ "$i" = $1 ]]; then
            else
                access=$(echo $(tr a-z A-Z <<< ${i:0:1})${i:1})
                printf "\t\tint\t\tget$access(void) const ;\n" >> $1.hpp
            fi
        done
    fi

    cat <<EOF >> $1.hpp
};

#endif /* !${name}_HPP */
EOF

    cat <<EOF >> $1.cpp
#include "$1.hpp"

/*
**  Constructors.
*/
EOF

    if [ $# -eq 1 ]; then
        printf "$1::$1(void)\n{ }\n\n" >> $1.cpp
    else
        TMP=0
        printf "$1::$1(void) :\n" >> $1.cpp
        for i in "$@"
        do
            TMP=$((TMP+1))
            if [[ "$i" = $1 ]]; then
            else
                access=$(echo $(tr a-z A-Z <<< ${i:0:1})${i:1})
                printf "\t_$i(0)" >> $1.cpp
                if [ $TMP -eq $# ]; then
                    printf "\n{ }\n\n" >> $1.cpp
                else
                    printf ",\n" >> $1.cpp
                fi
            fi
        done
    fi

    cat <<EOF >> $1.cpp
$1::$1($1 const &inst) {
    *this = inst;
}

$1  &$1::operator=($1 const &rhs) {
EOF


    if [ $# -eq 1 ]; then
    else
        for i in "$@"
        do
            if [[ "$i" = $1 ]]; then
            else
                access=$(echo $(tr a-z A-Z <<< ${i:0:1})${i:1})
                printf "\tthis->set$access(rhs.get$access());\n" >> $1.cpp
            fi
        done
    fi


    cat <<EOF >> $1.cpp
    return (*this);
}

$1::~$1(void)
{ }

EOF

    if [ $# -eq 1 ]; then
    else
        printf "/*\n**  Accessors\n*/\n" >> $1.cpp
        for i in "$@"
        do
            if [[ "$i" = $1 ]]; then
            else
                access=$(echo $(tr a-z A-Z <<< ${i:0:1})${i:1})
                printf "void\t\t$1::set$access(int v) {\n" >> $1.cpp
                printf "\tthis->_$i = v;\n}\n\n" >> $1.cpp
            fi
        done
        for i in "$@"
        do
            if [[ "$i" = $1 ]]; then
            else
                access=$(echo $(tr a-z A-Z <<< ${i:0:1})${i:1})
                printf "int\t\t\t$1::get$access(void) const {\n" >> $1.cpp
                printf "\treturn (this->_$i);\n}\n\n" >> $1.cpp
            fi
        done
    fi

    printf "Class \033[32m$1\033[0m perfectly generated.\n"
}






